# ===================================================================
# PROJECT4SITE - DOCKER COMPOSE CONFIGURATION
# ===================================================================
# Comprehensive microservices development environment
# Run with: docker-compose up -d
# ===================================================================

version: '3.8'

# ===================================================================
# NETWORKS
# ===================================================================
networks:
  project4site:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  external:
    driver: bridge

# ===================================================================
# VOLUMES
# ===================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  ai_models_cache:
    driver: local
  video_cache:
    driver: local
  shared_uploads:
    driver: local

# ===================================================================
# SERVICES
# ===================================================================
services:
  # =================================================================
  # DATABASE SERVICES
  # =================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: project4site_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: project4site_dev
      POSTGRES_USER: project4site
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/03-seed.sql:ro
    ports:
      - "5432:5432"
    networks:
      project4site:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U project4site -d project4site_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_duration=on

  redis:
    image: redis:7-alpine
    container_name: project4site_redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_dev_password}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      project4site:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_dev_password}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  neo4j:
    image: neo4j:5
    container_name: project4site_neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-neo4j_dev_password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    networks:
      project4site:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-neo4j_dev_password}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # =================================================================
  # CORE APPLICATION SERVICES
  # =================================================================
  
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      target: development
    container_name: project4site_api_gateway
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Service Discovery
      GITHUB_APP_SERVICE_URL: http://github-app:3010
      AI_PIPELINE_SERVICE_URL: http://ai-pipeline:8000
      SITE_GENERATOR_SERVICE_URL: http://site-generator:3001
      COMMISSION_SERVICE_URL: http://commission-service:3002
      DEPLOYMENT_SERVICE_URL: http://deployment-service:3003
      VIDEO_SERVICE_URL: http://video-service:3004
      
      # External APIs
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_32_chars_minimum}
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
      
      # Monitoring
      DATADOG_API_KEY: ${DATADOG_API_KEY:-}
      SENTRY_DSN: ${SENTRY_DSN:-}
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
      - shared_uploads:/app/uploads
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    networks:
      - project4site
      - external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: bun run dev
    develop:
      watch:
        - action: sync
          path: ./services/api-gateway
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/api-gateway/package.json

  github-app:
    build:
      context: ./services/github-app-service
      dockerfile: Dockerfile
      target: development
    container_name: project4site_github_app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3010
      HOST: 0.0.0.0
      
      # GitHub Configuration
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_INSTALLATION_ID: ${GITHUB_INSTALLATION_ID}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_PRIVATE_KEY_PATH: /app/private-key.pem
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Internal Communication
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
      AI_PIPELINE_SERVICE_URL: http://ai-pipeline:8000
    volumes:
      - ./services/github-app-service:/app
      - /app/node_modules
      - ./github-app.private-key.pem:/app/private-key.pem:ro
    ports:
      - "3010:3010"
    networks:
      - project4site
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: bun run dev

  ai-pipeline:
    build:
      context: ./services/ai-analysis-pipeline
      dockerfile: Dockerfile
      target: development
    container_name: project4site_ai_pipeline
    restart: unless-stopped
    environment:
      RUST_LOG: info
      RUST_BACKTRACE: 1
      PORT: 8000
      HOST: 0.0.0.0
      
      # AI Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Local Models
      LOCAL_MODELS_ENABLED: true
      MODEL_CACHE_DIR: /models
      GEMMA_MODEL_PATH: /models/gemma-3-8b
      DEEPSEEK_MODEL_PATH: /models/deepseek-r1
      AEGNT27_MODEL_PATH: /models/aegnt-27
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Performance
      AI_CONCURRENT_WORKERS: 4
      AI_PROCESSING_TIMEOUT: 60000
      AI_QUEUE_MAX_SIZE: 100
    volumes:
      - ./services/ai-analysis-pipeline:/app
      - ai_models_cache:/models
      - shared_uploads:/uploads
    ports:
      - "8000:8000"
    networks:
      - project4site
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    # Enable GPU access if available
    # runtime: nvidia
    # environment:
    #   - NVIDIA_VISIBLE_DEVICES=all

  site-generator:
    build:
      context: ./services/site-generation-engine
      dockerfile: Dockerfile
      target: development
    container_name: project4site_site_generator
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      HOST: 0.0.0.0
      
      # Next.js Configuration
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXT_PUBLIC_IMAGES_DOMAIN: localhost
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      
      # AI Services
      AI_PIPELINE_SERVICE_URL: http://ai-pipeline:8000
      
      # CDN and Assets
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Internal Communication
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
    volumes:
      - ./services/site-generation-engine:/app
      - /app/node_modules
      - /app/.next
      - shared_uploads:/app/uploads
    ports:
      - "3001:3001"
    networks:
      - project4site
    depends_on:
      postgres:
        condition: service_healthy
      ai-pipeline:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: bun run dev

  commission-service:
    build:
      context: ./services/commission-service
      dockerfile: Dockerfile
      target: development
    container_name: project4site_commission_service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3002
      HOST: 0.0.0.0
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Partner APIs
      FIGMA_CLIENT_ID: ${FIGMA_CLIENT_ID}
      FIGMA_CLIENT_SECRET: ${FIGMA_CLIENT_SECRET}
      SUPABASE_PARTNER_API_KEY: ${SUPABASE_PARTNER_API_KEY}
      LINEAR_API_KEY: ${LINEAR_API_KEY}
      VERCEL_PARTNER_TOKEN: ${VERCEL_PARTNER_TOKEN}
      
      # Stripe Configuration
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Commission Configuration
      SUPABASE_COMMISSION_RATE: ${SUPABASE_COMMISSION_RATE:-0.20}
      FIGMA_COMMISSION_RATE: ${FIGMA_COMMISSION_RATE:-0.15}
      
      # Internal Communication
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
    volumes:
      - ./services/commission-service:/app
      - /app/node_modules
    ports:
      - "3002:3002"
    networks:
      - project4site
      - external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: bun run dev

  deployment-service:
    build:
      context: ./services/deployment-service
      dockerfile: Dockerfile
      target: development
    container_name: project4site_deployment_service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3003
      HOST: 0.0.0.0
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Deployment Targets
      VERCEL_TOKEN: ${VERCEL_TOKEN}
      VERCEL_ORG_ID: ${VERCEL_ORG_ID}
      RAILWAY_TOKEN: ${RAILWAY_TOKEN}
      
      # CDN Configuration
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      CLOUDFLARE_ZONE_ID: ${CLOUDFLARE_ZONE_ID}
      
      # Internal Communication
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
      SITE_GENERATOR_SERVICE_URL: http://site-generator:3001
    volumes:
      - ./services/deployment-service:/app
      - /app/node_modules
      - shared_uploads:/app/uploads
    ports:
      - "3003:3003"
    networks:
      - project4site
      - external
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: bun run dev

  video-service:
    build:
      context: ./services/video-generator
      dockerfile: Dockerfile
      target: development
    container_name: project4site_video_service
    restart: unless-stopped
    environment:
      PYTHON_ENV: development
      PORT: 3004
      HOST: 0.0.0.0
      
      # AI Configuration
      FLUX_MODEL_PATH: /models/flux.1
      AEGNT27_MODEL_PATH: /models/aegnt-27
      
      # Processing Configuration
      FFMPEG_PATH: /usr/bin/ffmpeg
      VIDEO_OUTPUT_DIR: /output
      VIDEO_CACHE_DIR: /cache
      MAX_VIDEO_LENGTH: 600
      VIDEO_QUALITY: high
      
      # Database
      DATABASE_URL: postgresql://project4site:${DATABASE_PASSWORD:-secure_dev_password}@postgres:5432/project4site_dev
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      
      # Internal Communication
      INTERNAL_API_SECRET: ${INTERNAL_API_SECRET:-dev_internal_secret}
      AI_PIPELINE_SERVICE_URL: http://ai-pipeline:8000
    volumes:
      - ./services/video-generator:/app
      - video_cache:/cache
      - shared_uploads:/output
      - ai_models_cache:/models
    ports:
      - "3004:3004"
    networks:
      - project4site
    depends_on:
      redis:
        condition: service_healthy
      ai-pipeline:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    # Enable GPU access if available
    # runtime: nvidia

  # =================================================================
  # DEVELOPMENT TOOLS & UTILITIES
  # =================================================================
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: project4site_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@project4site.dev
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "5050:80"
    networks:
      - project4site
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - dev-tools

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: project4site_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-redis_dev_password}
      PORT: 8081
    ports:
      - "8081:8081"
    networks:
      - project4site
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - dev-tools

  mailhog:
    image: mailhog/mailhog:latest
    container_name: project4site_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - project4site
    profiles:
      - dev-tools

  # =================================================================
  # MONITORING & OBSERVABILITY
  # =================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: project4site_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - project4site
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: project4site_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3030:3000"
    networks:
      - project4site
    depends_on:
      - prometheus
    profiles:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: project4site_jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Accept jaeger.thrift
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - project4site
    profiles:
      - monitoring

# ===================================================================
# ADDITIONAL VOLUMES FOR MONITORING
# ===================================================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===================================================================
# DEVELOPMENT PROFILES
# ===================================================================
# Run with specific profiles:
# docker-compose --profile dev-tools up -d     # Include development tools
# docker-compose --profile monitoring up -d    # Include monitoring stack
# docker-compose --profile all up -d           # Include everything