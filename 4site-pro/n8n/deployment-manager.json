{
  "name": "deployment-manager",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "parameters": {
        "triggerOn": "specificWorkflow",
        "workflowId": "site-builder"
      },
      "id": "workflow-trigger",
      "name": "Workflow Trigger",
      "type": "n8n-nodes-base.workflowTrigger",
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare deployment configuration\nconst data = $input.item(0).json;\nconst buildConfig = data.buildConfig;\nconst siteData = data.siteData;\n\nconst deploymentConfig = {\n  jobId: data.jobId,\n  buildId: buildConfig.buildId,\n  projectName: buildConfig.projectName,\n  targets: buildConfig.deployment.targets,\n  siteData,\n  subdomain: generateSubdomain(siteData.title),\n  deployments: {},\n  startTime: new Date().toISOString()\n};\n\n// Generate clean subdomain from project title\nfunction generateSubdomain(title) {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove special chars except spaces and hyphens\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .replace(/^-|-$/g, '') // Remove leading/trailing hyphens\n    .substring(0, 63); // DNS label limit\n}\n\nreturn {\n  ...data,\n  deploymentConfig\n};"
      },
      "id": "prepare-deployment",
      "name": "Prepare Deployment Config",
      "type": "n8n-nodes-base.code",
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/user/repos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "token {{$credentials.githubApi.accessToken}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"name\": $json.deploymentConfig.projectName + \"-4site\",\n  \"description\": \"Generated by 4site.pro from \" + $json.siteData.githubUrl,\n  \"private\": false,\n  \"auto_init\": true\n} }}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "create-github-repo",
      "name": "Create GitHub Pages Repo",
      "type": "n8n-nodes-base.httpRequest",
      "position": [680, 200],
      "credentials": {
        "githubApi": {
          "id": "github-api",
          "name": "GitHub API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v9/projects",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.vercelApi.accessToken}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"name\": $json.deploymentConfig.projectName,\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \"dist\",\n  \"installCommand\": \"npm install\",\n  \"devCommand\": \"npm run dev\",\n  \"framework\": \"vite\"\n} }}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "create-vercel-project",
      "name": "Create Vercel Project",
      "type": "n8n-nodes-base.httpRequest",
      "position": [680, 300],
      "credentials": {
        "vercelApi": {
          "id": "vercel-api",
          "name": "Vercel API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/api/v1/sites",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.netlifyApi.accessToken}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"name\": $json.deploymentConfig.projectName,\n  \"build_settings\": {\n    \"cmd\": \"npm run build\",\n    \"dir\": \"dist\"\n  }\n} }}",
        "options": {
          "timeout": 15000
        }
      },
      "id": "create-netlify-site",
      "name": "Create Netlify Site",
      "type": "n8n-nodes-base.httpRequest",
      "position": [680, 400],
      "credentials": {
        "netlifyApi": {
          "id": "netlify-api",
          "name": "Netlify API Token"
        }
      }
    },
    {
      "parameters": {
        "command": "sh -c 'cd /builds/{{$json[\"deploymentConfig\"][\"buildId\"]}} && tar -czf ../{{$json[\"deploymentConfig\"][\"buildId\"]}}.tar.gz dist/'",
        "dockerImage": "alpine:latest",
        "volumes": {
          "volume": [
            {
              "hostPath": "/tmp/4site-builds",
              "containerPath": "/builds"
            }
          ]
        }
      },
      "id": "package-build",
      "name": "Package Build Files",
      "type": "n8n-nodes-base.docker",
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process deployment results\nconst items = $input.all();\nconst originalData = items[0].json;\nconst deploymentResults = {};\n\n// Process GitHub Pages result\nconst githubResult = items.find(item => item.json.full_name);\nif (githubResult && githubResult.json.html_url) {\n  deploymentResults.github = {\n    status: 'created',\n    url: githubResult.json.html_url,\n    repoName: githubResult.json.name,\n    deployUrl: githubResult.json.html_url\n  };\n}\n\n// Process Vercel result\nconst vercelResult = items.find(item => item.json.id && item.json.name && !item.json.full_name);\nif (vercelResult && vercelResult.json.id) {\n  deploymentResults.vercel = {\n    status: 'created',\n    projectId: vercelResult.json.id,\n    name: vercelResult.json.name,\n    deployUrl: `https://${vercelResult.json.name}.vercel.app`\n  };\n}\n\n// Process Netlify result\nconst netlifyResult = items.find(item => item.json.site_id);\nif (netlifyResult && netlifyResult.json.site_id) {\n  deploymentResults.netlify = {\n    status: 'created',\n    siteId: netlifyResult.json.site_id,\n    name: netlifyResult.json.name,\n    deployUrl: netlifyResult.json.ssl_url || netlifyResult.json.url\n  };\n}\n\nreturn {\n  ...originalData,\n  deploymentResults,\n  deploymentStatus: 'platforms_created',\n  createdAt: new Date().toISOString()\n};"
      },
      "id": "process-deployment-results",
      "name": "Process Deployment Results",
      "type": "n8n-nodes-base.code",
      "position": [1120, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/{{$json[\"deploymentResults\"][\"github\"][\"repoName\"]}}/contents/dist.tar.gz",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "token {{$credentials.githubApi.accessToken}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"message\": \"Deploy site build\",\n  \"content\": $binary.data.toString('base64')\n} }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "deploy-to-github",
      "name": "Deploy to GitHub Pages",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1340, 200],
      "credentials": {
        "githubApi": {
          "id": "github-api",
          "name": "GitHub API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.vercel.com/v13/deployments",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.vercelApi.accessToken}}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"name\": $json.deploymentResults.vercel.name,\n  \"files\": [{\n    \"file\": \"dist.tar.gz\",\n    \"data\": $binary.data.toString('base64')\n  }],\n  \"projectSettings\": {\n    \"buildCommand\": \"tar -xzf dist.tar.gz\",\n    \"outputDirectory\": \"dist\"\n  }\n} }}",
        "options": {
          "timeout": 45000
        }
      },
      "id": "deploy-to-vercel",
      "name": "Deploy to Vercel",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1340, 300],
      "credentials": {
        "vercelApi": {
          "id": "vercel-api",
          "name": "Vercel API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/api/v1/sites/{{$json[\"deploymentResults\"][\"netlify\"][\"siteId\"]}}/deploys",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.netlifyApi.accessToken}}"
            },
            {
              "name": "Content-Type",
              "value": "application/zip"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "binaryData",
        "options": {
          "timeout": 45000
        }
      },
      "id": "deploy-to-netlify",
      "name": "Deploy to Netlify", 
      "type": "n8n-nodes-base.httpRequest",
      "position": [1340, 400],
      "credentials": {
        "netlifyApi": {
          "id": "netlify-api",
          "name": "Netlify API Token"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "table": "site_generation_jobs",
        "updateKey": "job_id",
        "columns": "status, deployment_results, updated_at",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "id": "update-database",
      "name": "Update Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1560, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "PostgreSQL Main Database"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "dns-manager",
        "waitForExecution": false
      },
      "id": "trigger-dns-manager",
      "name": "Trigger DNS Manager",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [1780, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Workflow Trigger": {
      "main": [
        [
          {
            "node": "Prepare Deployment Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Deployment Config": {
      "main": [
        [
          {
            "node": "Create GitHub Pages Repo",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Vercel Project",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Netlify Site",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create GitHub Pages Repo": {
      "main": [
        [
          {
            "node": "Process Deployment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Vercel Project": {
      "main": [
        [
          {
            "node": "Process Deployment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Netlify Site": {
      "main": [
        [
          {
            "node": "Process Deployment Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Deployment Results": {
      "main": [
        [
          {
            "node": "Package Build Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Package Build Files": {
      "main": [
        [
          {
            "node": "Deploy to GitHub Pages",
            "type": "main",
            "index": 0
          },
          {
            "node": "Deploy to Vercel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Deploy to Netlify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy to GitHub Pages": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy to Vercel": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deploy to Netlify": {
      "main": [
        [
          {
            "node": "Update Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Database": {
      "main": [
        [
          {
            "node": "Trigger DNS Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "id": "deployment-manager",
  "tags": ["4site-pro", "deployment", "multi-platform"]
}