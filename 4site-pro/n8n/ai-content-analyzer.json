{
  "name": "ai-content-analyzer",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "nodes": [
    {
      "parameters": {
        "triggerOn": "specificWorkflow",
        "workflowId": "github-repository-processor"
      },
      "id": "workflow-trigger",
      "name": "Workflow Trigger",
      "type": "n8n-nodes-base.workflowTrigger",
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare AI analysis prompt\nconst data = $input.item(0).json;\nconst readmeContent = data.content['README.md'] || '';\nconst planningContent = data.content['PLANNING.md'] || '';\nconst tasksContent = data.content['TASKS.md'] || '';\nconst repository = data.repository;\n\n// Create comprehensive prompt for AI analysis\nconst analysisPrompt = `\nAnalyze this GitHub repository and generate a professional site structure.\n\nRepository: ${repository.fullName}\nDescription: ${repository.description}\nLanguage: ${repository.language}\nStars: ${repository.stars}\nTopics: ${repository.topics.join(', ')}\n\nREADME Content:\n${readmeContent}\n\n${planningContent ? `PLANNING Content:\\n${planningContent}\\n` : ''}\n${tasksContent ? `TASKS Content:\\n${tasksContent}\\n` : ''}\n\nPlease analyze this repository and return a JSON object with the following structure:\n{\n  \"title\": \"Project title\",\n  \"description\": \"Compelling project description\",\n  \"features\": [\"list of key features\"],\n  \"techStack\": [\"technologies used\"],\n  \"sections\": [\n    {\n      \"id\": \"overview\",\n      \"title\": \"Overview\", \n      \"content\": \"Section content\",\n      \"type\": \"overview\"\n    }\n  ],\n  \"projectType\": \"tech|creative|business\",\n  \"primaryColor\": \"#hexcolor\",\n  \"githubUrl\": \"${data.githubUrl}\",\n  \"seoKeywords\": [\"relevant keywords\"],\n  \"callToAction\": {\n    \"primary\": \"View on GitHub\",\n    \"secondary\": \"Download\"\n  }\n}\n\nFocus on making the site professional, engaging, and optimized for conversions.\n`;\n\nreturn {\n  ...data,\n  analysisPrompt,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare-ai-prompt",
      "name": "Prepare AI Analysis Prompt",
      "type": "n8n-nodes-base.code",
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-goog-api-key",
              "value": "={{$credentials.geminiApi.apiKey}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": $json.analysisPrompt\n    }]\n  }],\n  \"generationConfig\": {\n    \"temperature\": 0.7,\n    \"topK\": 40,\n    \"topP\": 0.95,\n    \"maxOutputTokens\": 2048\n  }\n} }}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 2\n          }\n        }\n      },\n      \"id\": \"gemini-analysis\",\n      \"name\": \"Gemini AI Analysis\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [680, 240],\n      \"credentials\": {\n        \"geminiApi\": {\n          \"id\": \"gemini-api\",\n          \"name\": \"Google Gemini API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"url\": \"https://api.anthropic.com/v1/messages\",\n        \"sendHeaders\": true,\n        \"headerParameters\": {\n          \"parameters\": [\n            {\n              \"name\": \"x-api-key\",\n              \"value\": \"={{$credentials.anthropicApi.apiKey}}\"\n            },\n            {\n              \"name\": \"Content-Type\",\n              \"value\": \"application/json\"\n            },\n            {\n              \"name\": \"anthropic-version\",\n              \"value\": \"2023-06-01\"\n            }\n          ]\n        },\n        \"sendBody\": true,\n        \"specifyBody\": \"json\",\n        \"jsonBody\": \"={{ {\n  \\\"model\\\": \\\"claude-3-sonnet-20240229\\\",\n  \\\"max_tokens\\\": 2048,\n  \\\"messages\\\": [{\n    \\\"role\\\": \\\"user\\\",\n    \\\"content\\\": $json.analysisPrompt\n  }]\n} }}\",\n        \"options\": {\n          \"timeout\": 25000\n        }\n      },\n      \"id\": \"claude-fallback\",\n      \"name\": \"Claude Fallback Analysis\",\n      \"type\": \"n8n-nodes-base.httpRequest\",\n      \"position\": [680, 360],\n      \"credentials\": {\n        \"anthropicApi\": {\n          \"id\": \"anthropic-api\",\n          \"name\": \"Anthropic Claude API\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Parse and validate AI response\\nconst items = $input.all();\\nconst originalData = items[0].json;\\nlet aiResponse = null;\\nlet aiProvider = 'none';\\n\\n// Try to get response from Gemini first\\nconst geminiItem = items.find(item => item.json.candidates);\\nif (geminiItem && geminiItem.json.candidates && geminiItem.json.candidates[0]) {\\n  try {\\n    const responseText = geminiItem.json.candidates[0].content.parts[0].text;\\n    // Extract JSON from response\\n    const jsonMatch = responseText.match(/\\\\{[\\\\s\\\\S]*\\\\}/);\\n    if (jsonMatch) {\\n      aiResponse = JSON.parse(jsonMatch[0]);\\n      aiProvider = 'gemini';\\n    }\\n  } catch (error) {\\n    console.log('Failed to parse Gemini response:', error.message);\\n  }\\n}\\n\\n// Fallback to Claude if Gemini failed\\nif (!aiResponse) {\\n  const claudeItem = items.find(item => item.json.content && Array.isArray(item.json.content));\\n  if (claudeItem && claudeItem.json.content[0]) {\\n    try {\\n      const responseText = claudeItem.json.content[0].text;\\n      const jsonMatch = responseText.match(/\\\\{[\\\\s\\\\S]*\\\\}/);\\n      if (jsonMatch) {\\n        aiResponse = JSON.parse(jsonMatch[0]);\\n        aiProvider = 'claude';\\n      }\\n    } catch (error) {\\n      console.log('Failed to parse Claude response:', error.message);\\n    }\\n  }\\n}\\n\\n// Create fallback response if AI analysis failed\\nif (!aiResponse) {\\n  aiResponse = {\\n    title: originalData.repository.name || 'Untitled Project',\\n    description: originalData.repository.description || 'A GitHub repository project',\\n    features: ['Open source project', 'Community driven'],\\n    techStack: [originalData.repository.language || 'Unknown'],\\n    sections: [\\n      {\\n        id: 'overview',\\n        title: 'Overview',\\n        content: originalData.content['README.md'] || 'No description available.',\\n        type: 'overview'\\n      }\\n    ],\\n    projectType: 'tech',\\n    primaryColor: '#0066cc',\\n    githubUrl: originalData.githubUrl,\\n    seoKeywords: [originalData.repository.name, originalData.repository.language].filter(Boolean),\\n    callToAction: {\\n      primary: 'View on GitHub',\\n      secondary: 'Star Project'\\n    }\\n  };\\n  aiProvider = 'fallback';\\n}\\n\\n// Validate and clean response\\nconst siteData = {\\n  ...aiResponse,\\n  title: aiResponse.title || originalData.repository.name || 'Untitled Project',\\n  description: aiResponse.description || originalData.repository.description || 'A GitHub repository project',\\n  features: Array.isArray(aiResponse.features) ? aiResponse.features : [],\\n  techStack: Array.isArray(aiResponse.techStack) ? aiResponse.techStack : [originalData.repository.language].filter(Boolean),\\n  sections: Array.isArray(aiResponse.sections) ? aiResponse.sections : [],\\n  projectType: ['tech', 'creative', 'business'].includes(aiResponse.projectType) ? aiResponse.projectType : 'tech',\\n  primaryColor: aiResponse.primaryColor || '#0066cc',\\n  githubUrl: originalData.githubUrl,\\n  seoKeywords: Array.isArray(aiResponse.seoKeywords) ? aiResponse.seoKeywords : [],\\n  callToAction: aiResponse.callToAction || { primary: 'View on GitHub', secondary: 'Download' }\\n};\\n\\nreturn {\\n  ...originalData,\\n  siteData,\\n  aiProvider,\\n  analysisComplete: true,\\n  processedAt: new Date().toISOString()\\n};\"\n      },\n      \"id\": \"parse-ai-response\",\n      \"name\": \"Parse AI Response\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"position\": [900, 300]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"update\",\n        \"table\": \"site_generation_jobs\",\n        \"updateKey\": \"job_id\",\n        \"columns\": \"status, site_data, ai_provider, updated_at\",\n        \"additionalFields\": {\n          \"mode\": \"independently\"\n        }\n      },\n      \"id\": \"update-database\",\n      \"name\": \"Update Database with Site Data\",\n      \"type\": \"n8n-nodes-base.postgres\",\n      \"position\": [1120, 300],\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"postgres-main\",\n          \"name\": \"PostgreSQL Main Database\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"workflowId\": \"site-builder\",\n        \"waitForExecution\": false\n      },\n      \"id\": \"trigger-site-builder\",\n      \"name\": \"Trigger Site Builder\",\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"position\": [1340, 300]\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"number\": [\n            {\n              \"value1\": \"={{$json['statusCode']}}\",\n              \"operation\": \"equal\",\n              \"value2\": 200\n            }\n          ]\n        }\n      },\n      \"id\": \"check-gemini-success\",\n      \"name\": \"Check Gemini Success\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"position\": [680, 300]\n    }\n  ],\n  \"pinData\": {},\n  \"connections\": {\n    \"Workflow Trigger\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Prepare AI Analysis Prompt\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Prepare AI Analysis Prompt\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Gemini AI Analysis\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Gemini AI Analysis\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse AI Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ],\n      \"error\": [\n        [\n          {\n            \"node\": \"Claude Fallback Analysis\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Claude Fallback Analysis\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Parse AI Response\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Parse AI Response\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Update Database with Site Data\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Update Database with Site Data\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Trigger Site Builder\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"active\": true,\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"versionId\": \"1.0.0\",\n  \"id\": \"ai-content-analyzer\",\n  \"tags\": [\"4site-pro\", \"ai-analysis\", \"content-generation\"]\n}"